// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadingNook.Models;

namespace ReadingNook.Migrations
{
    [DbContext(typeof(ReadingNookContext))]
    partial class ReadingNookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ReadingNook.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DOB")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ReadingNook.Models.AuthorBook", b =>
                {
                    b.Property<int>("AuthorBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorBookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("ReadingNook.Models.AuthorGenre", b =>
                {
                    b.Property<int>("AuthorGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("AuthorGenreId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("AuthorGenre");
                });

            modelBuilder.Entity("ReadingNook.Models.AuthorSubgenre", b =>
                {
                    b.Property<int>("AuthorSubgenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("SubgenreId")
                        .HasColumnType("int");

                    b.HasKey("AuthorSubgenreId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SubgenreId");

                    b.ToTable("AuthorSubgenre");
                });

            modelBuilder.Entity("ReadingNook.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Publication")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Series")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ReadingNook.Models.BookGenre", b =>
                {
                    b.Property<int>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BookGenreId");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("ReadingNook.Models.BookReadlist", b =>
                {
                    b.Property<int>("BookReadlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("ReadlistId")
                        .HasColumnType("int");

                    b.HasKey("BookReadlistId");

                    b.HasIndex("BookId");

                    b.HasIndex("ReadlistId");

                    b.ToTable("BookReadlist");
                });

            modelBuilder.Entity("ReadingNook.Models.BookSubgenre", b =>
                {
                    b.Property<int>("BookSubgenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("SubgenreId")
                        .HasColumnType("int");

                    b.HasKey("BookSubgenreId");

                    b.HasIndex("BookId");

                    b.HasIndex("SubgenreId");

                    b.ToTable("BookSubgenre");
                });

            modelBuilder.Entity("ReadingNook.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ReadingNook.Models.Readlist", b =>
                {
                    b.Property<int>("ReadlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ReadlistId");

                    b.ToTable("Readlists");
                });

            modelBuilder.Entity("ReadingNook.Models.Subgenre", b =>
                {
                    b.Property<int>("SubgenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SubgenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("Subgenres");
                });

            modelBuilder.Entity("ReadingNook.Models.AuthorBook", b =>
                {
                    b.HasOne("ReadingNook.Models.Author", "Author")
                        .WithMany("AuthorBookJoinEntities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingNook.Models.Book", "Book")
                        .WithMany("AuthorBookJoinEntities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ReadingNook.Models.AuthorGenre", b =>
                {
                    b.HasOne("ReadingNook.Models.Author", "Author")
                        .WithMany("AuthorGenreJoinEntities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingNook.Models.Genre", "Genre")
                        .WithMany("AuthorGenreJoinEntities")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ReadingNook.Models.AuthorSubgenre", b =>
                {
                    b.HasOne("ReadingNook.Models.Author", "Author")
                        .WithMany("AuthorSubgenreJoinEntities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingNook.Models.Subgenre", "Subgenre")
                        .WithMany("AuthorSubgenreJoinEntities")
                        .HasForeignKey("SubgenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subgenre");
                });

            modelBuilder.Entity("ReadingNook.Models.BookGenre", b =>
                {
                    b.HasOne("ReadingNook.Models.Book", "Book")
                        .WithMany("BookGenreJoinEntities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingNook.Models.Genre", "Genre")
                        .WithMany("BookGenreJoinEntities")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ReadingNook.Models.BookReadlist", b =>
                {
                    b.HasOne("ReadingNook.Models.Book", "Book")
                        .WithMany("BookReadlistJoinEntities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingNook.Models.Readlist", "Readlist")
                        .WithMany("BookReadlistJoinEntities")
                        .HasForeignKey("ReadlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Readlist");
                });

            modelBuilder.Entity("ReadingNook.Models.BookSubgenre", b =>
                {
                    b.HasOne("ReadingNook.Models.Book", "Book")
                        .WithMany("BookSubgenreJoinEntities")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingNook.Models.Subgenre", "Subgenre")
                        .WithMany("BookSubgenreJoinEntities")
                        .HasForeignKey("SubgenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Subgenre");
                });

            modelBuilder.Entity("ReadingNook.Models.Subgenre", b =>
                {
                    b.HasOne("ReadingNook.Models.Genre", "Genre")
                        .WithMany("Subgenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ReadingNook.Models.Author", b =>
                {
                    b.Navigation("AuthorBookJoinEntities");

                    b.Navigation("AuthorGenreJoinEntities");

                    b.Navigation("AuthorSubgenreJoinEntities");
                });

            modelBuilder.Entity("ReadingNook.Models.Book", b =>
                {
                    b.Navigation("AuthorBookJoinEntities");

                    b.Navigation("BookGenreJoinEntities");

                    b.Navigation("BookReadlistJoinEntities");

                    b.Navigation("BookSubgenreJoinEntities");
                });

            modelBuilder.Entity("ReadingNook.Models.Genre", b =>
                {
                    b.Navigation("AuthorGenreJoinEntities");

                    b.Navigation("BookGenreJoinEntities");

                    b.Navigation("Subgenres");
                });

            modelBuilder.Entity("ReadingNook.Models.Readlist", b =>
                {
                    b.Navigation("BookReadlistJoinEntities");
                });

            modelBuilder.Entity("ReadingNook.Models.Subgenre", b =>
                {
                    b.Navigation("AuthorSubgenreJoinEntities");

                    b.Navigation("BookSubgenreJoinEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
